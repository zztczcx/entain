name: CI

on:
  push:

env:
  GO_VERSION: '1.23.x'
  GRPC_GATEWAY_VERSION: 'v2.27.2'
  PROTOC_GEN_GO_VERSION: 'v1.36.9'
  PROTOC_GEN_GO_GRPC_VERSION: 'v1.5.1'

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      PATH: /usr/local/bin:/usr/bin:/bin:/usr/local/go/bin:/go/bin
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: go-cache-${{ hashFiles('**/go.sum') }}-${{ env.GRPC_GATEWAY_VERSION }}
      - name: Setup and lint
        run: |
          apt-get update
          apt-get install -y protobuf-compiler
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@${{ env.GRPC_GATEWAY_VERSION }} &
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@${{ env.GRPC_GATEWAY_VERSION }} &
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@${{ env.PROTOC_GEN_GO_GRPC_VERSION }} &
          go install google.golang.org/protobuf/cmd/protoc-gen-go@${{ env.PROTOC_GEN_GO_VERSION }} &
          go install github.com/vektra/mockery/v2@v2.53.5 &
          wait
          for service in racing sports api; do
            (cd $service && go generate ./... && go vet ./... && go fmt -d . | tee fmt.out && test ! -s fmt.out)
          done

  build:
    runs-on: ubuntu-latest
    env:
      PATH: /usr/local/bin:/usr/bin:/bin:/usr/local/go/bin:/go/bin
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: go-cache-${{ hashFiles('**/go.sum') }}-${{ env.GRPC_GATEWAY_VERSION }}
      - name: Build and package
        run: |
          apt-get update
          apt-get install -y protobuf-compiler
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@${{ env.GRPC_GATEWAY_VERSION }} &
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@${{ env.GRPC_GATEWAY_VERSION }} &
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@${{ env.PROTOC_GEN_GO_GRPC_VERSION }} &
          go install google.golang.org/protobuf/cmd/protoc-gen-go@${{ env.PROTOC_GEN_GO_VERSION }} &
          go install github.com/vektra/mockery/v2@v2.53.5 &
          wait
          mkdir -p dist
          for service in racing sports api; do
            (cd $service && go generate ./... && go build -buildvcs=false -o ../dist/$service .)
          done
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  test:
    runs-on: ubuntu-latest
    env:
      PATH: /usr/local/bin:/usr/bin:/bin:/usr/local/go/bin:/go/bin
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: go-cache-${{ hashFiles('**/go.sum') }}-${{ env.GRPC_GATEWAY_VERSION }}
      - name: Test services
        run: |
          apt-get update
          apt-get install -y protobuf-compiler
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@${{ env.GRPC_GATEWAY_VERSION }}
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@${{ env.GRPC_GATEWAY_VERSION }}
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@${{ env.PROTOC_GEN_GO_GRPC_VERSION }}
          go install google.golang.org/protobuf/cmd/protoc-gen-go@${{ env.PROTOC_GEN_GO_VERSION }}
          go install github.com/vektra/mockery/v2@v2.53.5
          for service in racing sports; do
            (cd $service && go generate ./... && go test ./...)
          done

  smoke:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Start services
        run: |
          chmod +x dist/*
          nohup ./dist/racing --grpc-endpoint localhost:9000 > racing.out 2>&1 &
          nohup ./dist/sports --grpc-endpoint localhost:9001 > sports.out 2>&1 &
          nohup ./dist/api --api-endpoint localhost:8000 --racing-grpc-endpoint localhost:9000 --sports-grpc-endpoint localhost:9001 > api.out 2>&1 &

      - name: Wait for API and run smoke tests
        run: |
          # Wait for API to be ready
          for i in {1..30}; do
            if curl -sS -H 'Content-Type: application/json' -d '{}' http://localhost:8000/v1/list-races -o /dev/null; then
              echo "API ready"; break;
            fi
            sleep 1
            if [ $i -eq 30 ]; then
              echo "API timeout"; tail -n +1 *.out; exit 1
            fi
          done

          # Test racing endpoints
          curl -sS -H 'Content-Type: application/json' -d '{}' http://localhost:8000/v1/list-races | grep -q '"races"'
          curl -sS -H 'Content-Type: application/json' -d '{"filter":{"show_hidden": false}}' http://localhost:8000/v1/list-races | grep -q '"races"'
          
          # Test GetRace
          code=$(curl -sS -o /dev/null -w '%{http_code}' http://localhost:8000/v1/races/1)
          test "$code" = "200"
          code=$(curl -sS -o /dev/null -w '%{http_code}' http://localhost:8000/v1/races/9999)
          test "$code" = "404"

          # Test sports endpoints
          curl -sS -H 'Content-Type: application/json' -d '{}' http://localhost:8000/v1/list-events | grep -q '"events"'
          curl -sS -H 'Content-Type: application/json' -d '{"filter":{"show_hidden": false}}' http://localhost:8000/v1/list-events | grep -q '"events"'
          curl -sS -H 'Content-Type: application/json' -d '{"filter":{"sport_ids": [1], "show_hidden": false}}' http://localhost:8000/v1/list-events | grep -q '"events"'

