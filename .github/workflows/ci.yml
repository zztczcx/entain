name: CI

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          cache: true

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc/tools plugins
        run: |
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install github.com/vektra/mockery/v2@v2.53


      - name: Generate and build racing
        working-directory: racing
        run: |
          go generate ./...
          go build -buildvcs=false ./...

      - name: Generate and build api
        working-directory: api
        run: |
          go generate ./...
          go build -buildvcs=false ./...

      - name: Build binaries (dist)
        run: |
          mkdir -p dist
          (cd racing && go build -buildvcs=false -o ../dist/racing .)
          (cd api && go build -buildvcs=false -o ../dist/api .)

      - name: Upload binaries artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  smoke:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Make binaries executable
        run: |
          chmod +x dist/racing dist/api

      - name: Start gRPC server
        working-directory: racing
        run: |
          nohup bash -c '../dist/racing --grpc-endpoint localhost:9000' > ../racing.out 2>&1 &

      - name: Start API gateway
        working-directory: api
        run: |
          nohup bash -c '../dist/api --api-endpoint localhost:8000 --grpc-endpoint localhost:9000' > ../api.out 2>&1 &

      - name: Wait for API to be ready
        run: |
          for i in {1..30}; do
            if curl -sS -H 'Content-Type: application/json' -d '{}' http://localhost:8000/v1/list-races -o /dev/null; then
              echo "API ready"; exit 0;
            fi
            sleep 1
          done
          echo "API did not become ready in time"; echo '--- api logs ---'; tail -n +1 api.out || true; echo '--- racing logs ---'; tail -n +1 racing.out || true; exit 1

      - name: Curl ListRaces (default)
        run: |
          curl -sS -H 'Content-Type: application/json' -d '{}' http://localhost:8000/v1/list-races | tee resp.json
          grep -q '"races"' resp.json

      - name: Curl ListRaces (visible only)
        run: |
          curl -sS -H 'Content-Type: application/json' \
            -d '{"filter":{"show_hidden": false}}' \
            http://localhost:8000/v1/list-races | tee resp_visible.json
          grep -q '"races"' resp_visible.json


