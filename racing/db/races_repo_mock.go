// Code generated by mockery v2.53.5. DO NOT EDIT.

package db

import (
	racing "git.neds.sh/matty/entain/racing/proto/racing"
	mock "github.com/stretchr/testify/mock"
)

// RacesRepoMock is an autogenerated mock type for the RacesRepo type
type RacesRepoMock struct {
	mock.Mock
}

// Init provides a mock function with no fields
func (_m *RacesRepoMock) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: filter
func (_m *RacesRepoMock) List(filter *racing.ListRacesRequestFilter) ([]*racing.Race, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*racing.Race
	var r1 error
	if rf, ok := ret.Get(0).(func(*racing.ListRacesRequestFilter) ([]*racing.Race, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*racing.ListRacesRequestFilter) []*racing.Race); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*racing.Race)
		}
	}

	if rf, ok := ret.Get(1).(func(*racing.ListRacesRequestFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *RacesRepoMock) Get(id int64) (*racing.Race, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *racing.Race
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*racing.Race, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *racing.Race); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*racing.Race)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRacesRepoMock creates a new instance of RacesRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRacesRepoMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RacesRepoMock {
	mock := &RacesRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
