syntax = "proto3";
package racing;

option go_package = "/racing";

import "google/protobuf/timestamp.proto";

service Racing {
  // ListRaces will return a collection of all races.
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse) {}
  // GetRace returns a single race by ID.
  rpc GetRace(GetRaceRequest) returns (GetRaceResponse) {}
}

/* Requests/Responses */

message ListRacesRequest {
  ListRacesRequestFilter filter = 1;
}

// Response to ListRaces call.
message ListRacesResponse {
  repeated Race races = 1;
}

// Request for GetRace call.
message GetRaceRequest {
  int64 id = 1;
}

// Response to GetRace call.
message GetRaceResponse {
  Race race = 1;
}

// Filter for listing races.
message ListRacesRequestFilter {
  repeated int64 meeting_ids = 1;
  // When unset, include hidden (default). Set false to only visible; true to include hidden.
  optional bool show_hidden = 2;
  // Order by, e.g. "advertised_start_time" or "advertised_start_time desc" (default asc)
  string order_by = 3;
}

/* Resources */

// A race resource.
message Race {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 meeting_id = 2;
  // Name is the official name given to the race.
  string name = 3;
  // Number represents the number of the race.
  int64 number = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  // Status is derived from advertised_start_time: OPEN (future) or CLOSED (past)
  enum Status {
    STATUS_OPEN = 0;
    STATUS_CLOSED = 1;
  }
  Status status = 7;
}

