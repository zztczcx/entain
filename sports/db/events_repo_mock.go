// Code generated by mockery v2.53.5. DO NOT EDIT.

package db

import (
	sports "git.neds.sh/matty/entain/sports/proto/sports"
	mock "github.com/stretchr/testify/mock"
)

// EventsRepoMock is an autogenerated mock type for the EventsRepo type
type EventsRepoMock struct {
	mock.Mock
}

// Init provides a mock function with no fields
func (_m *EventsRepoMock) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: filter
func (_m *EventsRepoMock) List(filter *sports.ListEventsRequestFilter) ([]*sports.Event, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*sports.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*sports.ListEventsRequestFilter) ([]*sports.Event, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*sports.ListEventsRequestFilter) []*sports.Event); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sports.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*sports.ListEventsRequestFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventsRepoMock creates a new instance of EventsRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventsRepoMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventsRepoMock {
	mock := &EventsRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
